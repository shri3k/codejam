{
  "name": "gulp-spawn-mocha",
  "version": "0.1.7-beta.3",
  "description": "Runs Mocha as a child process.",
  "main": "lib/index.js",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/KenPowers/gulp-spawn-mocha.git"
  },
  "keywords": [
    "gulpplugin",
    "mocha",
    "spawn",
    "child",
    "process"
  ],
  "author": {
    "name": "Kenneth Powers",
    "email": "ken@kenpowers.net"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/KenPowers/gulp-spawn-mocha/issues"
  },
  "homepage": "https://github.com/KenPowers/gulp-spawn-mocha",
  "dependencies": {
    "through": "~2.3.4",
    "lodash": "~2.4.1",
    "gulp-util": "~2.2.10",
    "cross-spawn": "~0.1.6"
  },
  "peerDependencies": {
    "mocha": "~1"
  },
  "devDependencies": {
    "gulp": "~3.2.4",
    "chai": "~1.8.1",
    "mocha": "~1",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0"
  },
  "engines": {
    "node": ">= 0.9.0"
  },
  "readme": "# gulp-spawn-mocha\n\n[![Build Status](https://travis-ci.org/KenPowers/gulp-spawn-mocha.png?branch=master)](https://travis-ci.org/KenPowers/gulp-spawn-mocha)\n\nThis is a plugin for [gulp][gulp] which runs [Mocha][mocha] tests in a\nseparate process from the `gulp` process. Each time tests are run a new child\nprocess is created meaning the test environment always starts cleanly (i.e.,\nglobals are reset as are non- enumerable properties defined on native\nprototypes via `Object.defineProperty`. This also means that if your tests\ncrash the node process (e.g., `process.exit(-1)`.) then an `error` event is\nemitted rather than your whole `gulp` process crashing (good for watching). It\nis simple enough to make gulp crash when necessary (e.g., for continuous\nintegration) by throwing the error as outlined below.\n\n## Usage\n\nUsage is according to this API:\n\n```javascript\nstream.pipe(mocha({\n  // options\n}))\n```\n\nThis plugin defines `mocha` `~1` as a `peerDependency` meaning that you can\ndefine a dependency on any version of `mocha` in your `package.json` and that\nversion will be used to run tests. If you don't specify a `mocha` in your\npackage.json, then the latest `1.x` version will automatically be installed.\n\nThere are two special options: `bin` and `env`. You can set `bin` to be a path\nto a `mocha` executable to use instead of the one this plugin looks for by\ndefault. This is useful if you want to use a fork of `mocha` which goes by a\ndifferent name. You can pass an object as the `env` option to set the\nenvironment variables that the child process will have access to (key-value\npairs, see [child_process::spawn][spawn]).\n\nAll other options are properly prefixed with either `-` or `--` and passed to\nthe `mocha` executable. Any arguments which do not take a value (e.g., `c`,\n`colors`, or `debug`) should just have a value of `true`. See the following\nexample usage:\n\n```javascript\nvar gulp = require('gulp'),\n    mocha = require('gulp-spawn-mocha');\n\ngulp.task('test', function () {\n  return test().on('error', function (e) {\n    throw e;\n  });\n});\n\ngulp.task('default', function () {\n  gulp.watch('{lib,test}/*', test);\n  test();\n});\n\nfunction test() {\n  return gulp.src(['test/*.test.js'], {read: false}).pipe(mocha({\n    r: 'test/setup.js',\n    R: 'spec',\n    c: true,\n    debug: true\n  })).on('error', console.warn.bind(console));\n}\n```\n\nThe `test` *function* will run the `mocha` executable telling it to require\n`test/setup.js` and use the `spec` reporter -- if there is an error it will\noutput a warning to the console. See `mocha -h` for additional options.\n\nThe `test` *task* will throw an error, crashing `gulp` (good for continuous\nintegration environments).\n\nThe `default` task will watch for changes and execute tests whenever a change\nis detected. It will also execute tasks immediately without waiting for a\nchange.\n\n### Custom Environment Variables\n\nAs mentioned above an object provided underneath the `env` options key will\nallow you to specify a custom environment.  This is useful, for example, to run\nyour tests in a different NODE_ENV than the default.  Such a gulp task would\nlook like:\n\n```javascript\nvar gulp = require('gulp'),\n    mocha = require('gulp-spawn-mocha');\n\ngulp.task('test', function() {\n  return gulp\n    .src(['test/*.test.js'])\n    .pipe(mocha({\n      env: {'NODE_ENV': 'test'}\n    }));\n});\n\n```\n\n## This or `gulp-mocha`?\n\nThe original `gulp-mocha` is fine in most circumstances. If you need your\ntests to run as a separate process (or a separate process is simply your\npreference for the reasons specified above) or you need to use a custom\nversion of Mocha (e.g., a fork with bug fixes or custom functionality) then\nyou should use this plugin.\n\n## License\n\n**The MIT License**\n\nCopyright (c) 2014 Kenneth Powers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n  [gulp]: http://gulpjs.com/ \"gulp.js\"\n  [mocha]: http://visionmedia.github.io/mocha/ \"Mocha\"\n  [spawn]: http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options \"child_process::spawn\"\n",
  "readmeFilename": "README.md",
  "_id": "gulp-spawn-mocha@0.1.7-beta.3",
  "dist": {
    "shasum": "955ef3b8a01655ff5322fedcdc5c574271ef2b80"
  },
  "_from": "gulp-spawn-mocha@",
  "_resolved": "https://registry.npmjs.org/gulp-spawn-mocha/-/gulp-spawn-mocha-0.1.7-beta.3.tgz"
}
